# syntax=docker/dockerfile:1

# Define ARG before FROM to make it available for the FROM instruction
ARG NODE_VERSION=18

# ---------------------------
# Stage 1: Build the Next.js app
# ---------------------------
FROM --platform=$BUILDPLATFORM node:${NODE_VERSION}-alpine AS builder

# Add build arguments for versioning
ARG BUILDPLATFORM
ARG TARGETPLATFORM
# NODE_VERSION is already defined above, but redeclare to make it available in this stage
ARG NODE_VERSION

# Debug info for architecture
RUN echo "Building on $BUILDPLATFORM for $TARGETPLATFORM using Node ${NODE_VERSION}"

# Create app directory
WORKDIR /app

# Install dependencies using npm ci (reproducible installs)
COPY package.json package-lock.json ./
RUN npm ci

# Copy all source files
COPY . .

# Build the Next.js app (output: standalone in next.config.js)
RUN npm run build

# ---------------------------
# Stage 2: Create a minimal production image
# ---------------------------
FROM node:${NODE_VERSION}-alpine AS runner

# Add metadata
LABEL org.opencontainers.image.source="https://github.com/marmos91/cubbit-slideshow-demo" \
      org.opencontainers.image.description="Cubbit Slideshow Demo" \
      org.opencontainers.image.licenses="MIT"

# Set production environment variable
ENV NODE_ENV=production

# Create a non-root user with home directory
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs --ingroup nodejs

# Set working directory and permissions
WORKDIR /app
RUN chown -R nextjs:nodejs /app

# Copy the standalone build from the builder
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Install tini for better signal handling
RUN apk add --no-cache tini

# Expose Next.js default port
EXPOSE 3000

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Switch to non-root user
USER nextjs

# Use tini as entrypoint to properly handle signals
ENTRYPOINT ["/sbin/tini", "--"]

# Run the standalone server directly
CMD ["node", "server.js"]
